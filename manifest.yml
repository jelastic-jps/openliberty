type: install
id: openliberty-in-k8s
name: Open Liberty in Kubernetes
baseUrl: https://github.com/jelastic-jps/openliberty/raw/master
logo: /images/open-liberty-logo.png
description: 
  Open Liberty is an open source framework for building fast and efficient cloud-native Java microservices empowered by features from MicroProfile and Jakarta EE. 
homepage: https://openliberty.io/
onBeforeInit: scripts/onbeforeinit.js

settings:
  onBeforeInit: return settings;
  fields:
    - name: version
      type: list
      caption: Open Liberty Version 
      width: 400

    - name: displayfield
      type: displayfield
      caption: Kubernetes Topology

    - name: topo
      type: radio-fieldset
      values:
          - value: 0-dev
            caption: '<b>Development:</b> one control-plane (1) and one scalable worker (1+)'
          - value: 1-prod
            caption: '<b>Production:</b> multi control-plane (3) with API balancers (2+) and scalable workers (2+)'
      default: 0-dev

    - caption: Display Name
      type: string
      name: displayName
      default: Open Liberty in Kubernetes
      required: true
      width: 400

    - caption: Env Name
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: true
      required: true

    - caption: Region
      type: regionlist
      name: region
      disableInactive: true
      selectFirstAvailable: true
      width: 200
      filter:
        type: ["vz7"]
        isActive: true
 
onInstall:
  - script: return {result:0, envGroups:eval('(' + MANIFEST + ')').envGroups, ssl:!!jelastic.billing.account.GetQuotas('environment.jelasticssl.enabled').array[0].value}    
  - install: 
      jps: https://raw.githubusercontent.com/jelastic-jps/kubernetes/v1.25.4/manifest.jps
      envName: ${settings.envName}
      envGroups: ${response.envGroups}
      displayName: ${settings.displayName}
      ssl: ${response.ssl}
      region: ${settings.region}
      ownerUid: ${settings.ownerUid:[user.uid]}
      settings:
        topo: ${settings.topo}
        ownerUid: ${settings.ownerUid:[user.uid]}
        deploy: cmd
        cmd: |-
          verlte() { [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]; }
          verlt() {  [ "$1" = "$2" ] && return 1 || verlte $1 $2; }

          OPERATOR_NAMESPACE=open-liberty
          kubectl create namespace "$OPERATOR_NAMESPACE"
          kubectl apply --server-side -f https://raw.githubusercontent.com/OpenLiberty/open-liberty-operator/main/deploy/releases/${settings.version}/kubectl/openliberty-app-crd.yaml
          curl -L https://raw.githubusercontent.com/OpenLiberty/open-liberty-operator/main/deploy/releases/${settings.version}/kubectl/openliberty-app-rbac-watch-another.yaml | sed -e "s/OPEN_LIBERTY_OPERATOR_NAMESPACE/${OPERATOR_NAMESPACE}/" | sed -e "s/OPEN_LIBERTY_WATCH_NAMESPACE/${OPERATOR_NAMESPACE}/" | kubectl apply -f -
          curl -L https://raw.githubusercontent.com/OpenLiberty/open-liberty-operator/main/deploy/releases/${settings.version}/kubectl/openliberty-app-operator.yaml | sed -e "s/OPEN_LIBERTY_WATCH_NAMESPACE/${OPERATOR_NAMESPACE}/" | kubectl apply -n ${OPERATOR_NAMESPACE} -f -

          # API version changes
          if verlt ${settings.version} 1.2.0; then
            # application
            kubectl apply -f https://raw.githubusercontent.com/jelastic-jps/kubernetes/v1.22.6/addons/open-liberty.yaml
          else
            # cert-manager
            certmanager_version=1.10.1
            helm repo add jetstack https://charts.jetstack.io
            helm repo update
            helm install cert-manager --create-namespace --namespace cert-manager --version v${certmanager_version} jetstack/cert-manager --set installCRDs=true
            wait-deployment.sh cert-manager cert-manager 1 720
            for issuer_name in "le-production-issuer" "le-staging-issuer"; do
                wget "${baseUrl}/addons/cert-manager/${issuer_name}.yaml" -O "/tmp/${issuer_name}.yaml"
                sed -i 's/user@example\.com/${user.email}/g' "/tmp/${issuer_name}.yaml"
                kubectl create -f "/tmp/${issuer_name}.yaml"
            done
            # application
            kubectl apply -f https://raw.githubusercontent.com/jelastic-jps/kubernetes/v1.25.4/addons/open-liberty.yaml
          fi
  - script: |
      var resp = jelastic.env.control.GetEnvInfo("${settings.envName}", session);
      return {result:0, startPage: "http" + (resp.env.sslstate ? "s" : "") + "://" + resp.env.domain}
  - setGlobals:
        startPage: ${response.startPage}
startPage: ${globals.startPage}
success: |
  Enjoy your Open Liberty at [${globals.startPage}](${globals.startPage})
